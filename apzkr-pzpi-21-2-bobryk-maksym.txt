Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для автоматизації контролю відвідуваності зон локації

Студент гр. ПЗПІ-21-2
__________________ Бобрик М. Я.
(підпис)
Керівник роботи
__________________ доц. Лещинський В.О.
(підпис)

Роботу захищено «__»_________2024 р.
з оцінкою _________________________
Комісія:
__________________  доц. Лещинський В.О.
(підпис)
__________________ доц. Лещинська І.О.
(підпис)
__________________ ст.викл. Сокорчук І.П.
(підпис)
Харків
2024 р.

    Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук         Кафедра програмної інженерії
Спеціальність 121 – Інженерія програмного забезпечення
Курс           3		 Семестр  			            6				____
Навчальна дисципліна Архітектура програмного забезпечення

    ЗАВДАННЯ
    НА КУРСОВУ РОБОТУ СТУДЕНТА
    Бобрику Максиму Яновичу
1. Тема роботи: «Програмна система для автоматизації контролю відвідуваності зон локації»
2. Термін узгодження завдання курсової роботи «___»__________ 2024 р.
3. Термін здачі студентом закінченої роботи «___»___________ 2024 р.
4. Вихідні дані до проекту (роботи): В програмній системі передбачити:
Додавання нових пристрої відслідковування відвідуваності зон локації, формування звітів, редагування звітів. Використовувати ОС Windows 11, СКБД PostgreSQL, середовище розробки WebStorm, редактор коду Visual Code
5. Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) схема бази даних, діаграма варіантів використання, діаграма розгортання, інтерфейс головної сторінки





     КАЛЕНДАРНИЙ ПЛАН


Номер
Назва етапів курсової роботи
Строк виконання етапів роботи
Примітки
1
Функціональна специфікація
програмного проекту

виконано
2
Проектування програмного
проекту

виконано
3
Кодування програмного проекту

виконано
4
Оформлення пояснювальної
записки

виконано
5
Захист курсової роботи

виконано

    Дата видачі завдання «______»______________2024 р.
Керівник
__________________ доц. Лещинський В.О.
(підпис)

    Завдання прийняв до виконання
ст. гр. ПЗПІ-21-2
__________________                Бобрик М. Я.
(підпис)



РЕФЕРАТ


     Пояснювальна записка до курсової роботи: 62 с., 48 рис., 1 додатки, 6 джерел.
     АРХІТЕКТУРА ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ, ВІДВІДУВАННЯ, ЛОКАЦІЇ, МОБІЛЬНИЙ ЗАСТОСУНОК, КОРИСТУВАЧ, ЗОНИ ЛОКАЦІЙ, АНАЛІТИЧНІ ДАНІ.
     Метою роботи є розробка програмної системи для автоматизації контролю відвідуваності зон локації.
     Методи розроблення базуються на застосовуванні редактору коду Visual Studio Code, PostgreSQL, мови програмування JavaScript, надбудови TypeScript, фреймворку Nest.JS, ORM TypeORM, бібліотеки React.JS, мови програмування Kotlin, UI фреймворку Jetpack Compose, мікроконтролеру ESP32, Micropython.
     У результаті отримано програмну систему із назвою «Area Pulse», яка дає користувачам змогу  за допомогою веб-інтерфейсу у ролі адміністратора переглядати інформацію щодо локації, додавати, редагувати та видаляти локації, переглядати та редагувати інформацію щодо зони локації, переглядати відвідуваність локації або конкретної зони локації. Мобільний застосунок дозволяє отримувати аналітичні дані стосовно відвідуваності локації від моделі штучного інтелекту. Також програмна система дозволяє підключати датчики пасивного інфрачервоного руху, які фіксують відвідування. Після фіксації дані про відвідування передаються на сервер, де вони зберігаються  в базі даних для подальшого аналізу.
     Така програмна система дозволить автоматизувати контроль відвідуваністю локації та забезпечить розуміння того, як керувати логістикою локації, як корегувати потік відвідувачів, а також отримання аналітики із рекомендаціями покращення відвідуваності.


ЗМІСТ


Вступ08
1 Аналіз предметної області09
  1.1 Бізнес вимоги09
     1.1.1 Бізнес-можливості09
     1.1.2 Бізнес-можливості010
     1.1.3 Потреби клієнтів та ринку010
     1.1.4 Бізнес-ризики011
  1.2 Концепція рішення012
     1.2.1 Окреслення концепції012
     1.2.2 Головна функціональність012
     1.2.3 Припущення та залежності014
  1.3 Окреслення концепції015
     1.3.1 Рамки та обмеження015
     1.3.2 Рамки наступних випусків016
     1.3.3 Обмеження та вийнятки017
  1.4 Бізнес-контекст019
     1.4.1 Профілі зацікавлених сторін019
     1.4.2 Пріоритети проєкту020
     1.4.3 Робоче середовище021
2 Проектування програмного проекту023
2.1 Аналіз предметної області023
2.2 Аналіз інформаційних потреб користувачів023
2.3 Проектування бази даних024
     2.3.1 Проектування бази даних з використанням ER діаграми024
  2.4 Проектування серверної частини проекту025
     2.4.1 Архітектура системи025
     2.4.2 REST специфікація025
     2.4.3 Розробка сервера027
         2.4.3.1 База даних та підключення027
         2.4.3.2 Структура серверу027
         2.4.3.3 Автентифікація027
         2.4.3.4 Управляння локаціями028
         2.4.3.5 Управління зонами локації028
         2.4.3.6 Управління сенсорами028
         2.4.3.7 Фіксування та отримання аналітики відвідуваності029
  2.5 Проектування програмного забезпечення для IoT пристрою029
     2.5.1 Моделювання програмного забезпечення для ІоТ пристрою029
     2.5.2 Взаємодія між частинами системи та ІоТ пристроєм030
     2.5.3 Архітектура програмного забезпечення для ІоТ пристрою030
     2.5.4 Програмна розробка системи031
         2.5.4.1 Модуль constants.py031
         2.5.4.2 Модуль http_service.py031
         2.5.4.3 Модуль wifi_service.py032
         2.5.4.4 Модуль area_pulse_service.py032
  2.6 Проектування клієнтської частини проекту032
     2.6.1 Моделювання клієнтської частини проекту032
     2.6.2 Архітектура клієнтської частини проекту033
     2.6.3 Розробка клієнтської частини проекту034
         2.6.3.1 Компонент LocationDetails034
         2.6.3.2 Компонент SectorDetails034
  2.7 Проектування мобільної частини програмної системи035
     2.7.1 Моделювання мобільної частини програмної системи035
     2.7.2 Архітектура мобільної частини програмної системи035
     2.7.3 Розробка мобільної частини програмної системи036
         2.7.3.1 Модуль NetworkModule037
         2.7.3.2 Модуль LocationRepository037
         2.7.3.3 Модуль LocationViewModel037
Висновки039
Перелік джерел040
Додаток А Діаграми041
Додаток Б Код програми058


ВСТУП


     Сьогодні світ потребує контролю доступу та моніторингу переміщень людей в межах певної локації, такої як торгівельний центр, завод чи інша організація для забезпечення безпеки, оптимізації робочих процесів та ефективного використання ресурсів. Однак багато існуючих систем контролю доступу можуть бути складними у встановленні, налаштуванні та використанні, особливо для невеликих організацій чи тих, що не мають спеціалізованого ІТ-персоналу.
     Традиційні методи, такі як перепустки, журнали відвідувань чи фізичні контрольні пункти, можуть бути незручними та схильними до помилок.
     Таким чином, виникає потреба у створенні програмної системи автоматичного контролю відвідуваності локації, яка поєднуватиме достатню функціональність та гнучкість з простотою встановлення, налаштування та використання. Така система має забезпечувати ефективний моніторинг переміщень людей в межах локації, одночасно залишаючись доступною та зрозумілою для широкого кола користувачів, незалежно від їхнього технічного досвіду чи ресурсів організації.

1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
     1.1 Бізнес-вимоги
     1.1.1 Бізнес-можливості


     Аналоги на ринку:
– Wialon: Користувачі можуть використовувати GPS для відстежування пересування транспортних засобів. Цей проєкт представляє собою систему із онлайн відстежуванням за допомогою GPS датчиків, яка додатково допомагає оптимізувати маршрут подорожі.
– Timedoctor: Програмна система може бути використана для відстежування відвідуваності працівників із постійним оновленням поточного статусу робітника. У даній системі за допомогою датчиків інфрачервоного руху та NFC авторизації відслідковується час прибуття працівника на місце роботи із зручним інтерфейсом для відстеження даних.
– Interguard: Програмний продукт, який дозволяє керувати відвідуваністю в приватних територіях за допомогою розпізнавання обличчя. Цей продукт має мобільний застосунок, який транслює зображення обличчя посторонніх користувачеві осіб.
     Переваги системи в порівнянні із наведеними вище аналогами на ринку полягають у сфері застосування. Система може застосовуватись в будь-яких локаціях, таких як торгівельний центр, парк, магазин. Її перевагою є формування загальної картини потоку відвідувачів на локації, а також генерації звіту із аналізом відвідуваності. Також, варто врахувати спектр користувачів, які можуть застосовувати систему, а саме фізичні особи-підприємці, малі бізнеси та великі.
     Монетизація відбувається у вигляді купівлі обладнання та підписки для отримання розширених можливостей.
     Продукт призначений для промислового ринку, тобто бізнесів, для різних користувачів у будь-яких галузях бізнесу.
     Система автоматизує керування відвідуваності зон локацій та вирішує проблему ефективності та складності керування потоків відвідувачів.


     1.1.2 Бізнес-цілі та критерії успіху


     З використанням продукту оптимізація використання ресурсів (простору, енергії тощо) шляхом відстеження кількості відвідувачів покращиться на 30-50%. Критерієм успіху є застосування програмної системи на 10 тис. локаціях.


     1.1.3 Потреби клієнтів та ринку


     а) Потреби клієнтів:
– Роздрібні магазини та заклади: роздрібні торгові точки, кафе, ресторани та інші заклади, що обслуговують відвідувачів, яким потрібно відстежувати потік відвідувачів для аналізу трафіку, оптимізації робочого навантаження та забезпечення безпеки.
– Об'єкти промисловості та виробництва: фабрики, склади та інші промислові об'єкти, де необхідно контролювати доступ персоналу до певних зон та відстежувати рух співробітників для забезпечення безпеки та ефективності.
б) Ринковий попит: існує постійний попит на автоматизовані системи, які дозволять ефективно відслідковувати потік відвідувачів в межах локації через прагнення забезпечити безпеку суспільству та розумний і ефективний розподіл ресурсів.
в) Невиконані потреби: Існує нагальна потреба у створенні доступної, гнучкої та масштабованої системи автоматичного контролю відвідуваності локації, яка б враховувала обмежені ресурси та специфічні потреби менших організацій, забезпечуючи належний рівень безпеки та ефективності.
     г) Сценарії використання:
– Користувачі створюють профілі локації, додаючи загальні характеристики локації.
– Система взаємодії із датчиками інфрачервоного руху, котрі гармонічно інтегровані в інтер’єр або екстер’єр локації, для постійного моніторингу.
– Користувачі отримують звіти, сформовані за допомогою штучного інтелекту, для формування статистики та контрою відвідуваності локації.


     1.1.4 Бізнес-ризики


– Конкуренція на ринку: Можливий ризик конкуренції зі сторони вже існуючих подібних систем відслідковування відвідуваності. Для зведення на мінімум даний ризик потрібно підтримувати та постійно вдосконалювати програмну систему для виділення на ринку.
– Прийняття користувачами: Значною мірою успіх системи залежить від задоволення потреб користувачів. Забезпечення простого та зручного інтерфейсу, докладних та інформативних звітів відвідуваності локації, точне відслідковування руху є особливо важливими для зменшення низького рівня прийняття користувачами.
– Виклики реалізації: Об'єднання системи з різноманітними датчиками та гарантування сумісності з численними апаратними конфігураціями може спричинити технічні складнощі. Для подолання таких проблем необхідно вдосконалити ефективні методи тестування та контролю якості.
– Негативний вплив на бізнес: Невідповідність продукту очікуванням клієнтів або появa технічних негараздів можуть завдати шкоди репутації бізнесу через негативні відгуки. Однак налагоджена підтримка користувачів та ретельний нагляд після випуску продукту здатні мінімізувати такі ризики.


     1.2 Концепція рішення
     1.2.1 Окреслення концепції


     Проєкт ставить за мету створити зручне рішення для контролю відвідуваності певних зон локації. Основною метою є розробка системи, яка дозволить автоматизувати процес фіксування переміщень людей між зонами на великих та малих майданчиках, таких як різноманітні магазини, складські комплекси чи розважальні парки. Концепція полягає у забезпеченні точного відстежування кількості відвідувачів, які завітали ту чи іншу зону, надаючи актуальну інформацію для аналізу та оптимізації робочих процесів, безпеки та логістики.


     1.2.2 Головна функціональність


     MF1. Автоматизоване відстеження:
 – Система автоматично відстежує рух відвідувачів в межах певної локації.
 – Датчики автоматично роблять розрахунок руху та відправляють дані на сервер.
     MF2. Персоналізовані профілі локації:
 – Користувачі можуть створювати і зберігати унікальні профілі для кожної локації, вказуючи її фізичні характеристики, місцезнаходження та підключати датчики.
 – Фунціонал доступний як на веб-сайті, так і в мобільному додатку, забезпечуючи комфортний та ефективний доступ для користувачів з будь-яких пристроїв.
 – Користувач може налаштовувати локації та вносити зміни у профілі в будь-який зручний момент часу.
     MF3. Сповіщення  та звітність:
– Система надсилає користувачам звітність про активність на зонах локації.
– Аналітика даних подається у вигляді діаграм, що дозволить користувачеві легше аналізувати та відстежувати показники датчиків.
     MF4. Адміністрування системи:
– Роль адміністратора в клієнтській та мобільній частині  подається у вигляді можливості управління локацією;
– Можливість використання різних датчиків у пристрої IoT.
     MF5.     Керування датчиками:
– Користувач може приєднувати потрібну кількість датчиків.
– Датчики взаємодіють з серверною частиною, надсилаючи в реальному часі дані для формування звіту.
     MF6.      Локалізація та мовна підтримка:
– Програмна система, а саме веб та мобільна частини, підтримує різні мови, англійську та українську, для використання користувачами з різних країн.


     1.2.3 Припущення та залежності


     а) Припущення:
– Припущення, що користувачі системи мають доступ до Інтернету та сучасних мобільних пристроїв для використання системи.
– Припущення, що датчики інфрачервоного руху можуть надавати точні та надійні виміри у будь-яких умовах фіксування руху.
– Припущення, що на локації встановлено необхідну інфраструктуру для відстеження місцезнаходження відвідувачів
– Припущення, що межі зон локації чітко визначені та не змінюються часто
     б) Залежності:
– Проєкт залежить від партнерства з виробниками та постачальниками сучасних датчиків інфрачервоного руху, щоб забезпечити точність та релевантність вимірювань.
– Проєкт може вимагати інтеграції з існуючими агротехнічними системами для обміну даними та отримання додаткової інформації про вирощувані культури.
– Проєкт може мати залежність від систем керування доступом до зон локації для інтеграції та автоматизації контролю доступу.
– Проєкт може залежати від наявності надійного інтернет-з'єднання на локації для передачі даних до хмарних сервісів або серверів системи.



     1.3 Рамки та обмеження
     1.3.1 Рамки первинного випуску


     Проект передбачає створення програмного продукту для контролю відвідуваності локацій, який буде доступний як і в браузері, так і на мобільних пристроях. У першому випуску програми передбачено наступні можливості та функціонал (однаковий для веб-сайту та мобільної версії):
– Керування профілями локацій: Користувачі можуть створювати та управляти профілями різних локацій, вказуючи параметри знаходження датчиків.
– Керування датчиками: Користувач може приєднувати певну кількість датчиків до локації, відстежувати їх показники, налаштовувати параметри датчиків.
– Автоматична звітність: Система буде автоматично формувати звіт відвідуваності локації за допомогою штучного інтелекту.
– Локалізація та мовна підтримка: Система повинна підтримувати різні мови (англійська та українська) для зручного використання користувачами з різних країн.
– Захист персональних даних: Всі дані користувачів повинні зберігатися в зашифрованому вигляді, забезпечуючи їх конфіденційність та безпеку.
– Адміністрування системи: Система має користувача, у якого буде доступ до переліку всіх датчиків з можливістю їх видалення.
    Пристрій IоT повинен вміти відправляти отримані датчиками дані та деякі розраховані на сервер (на back-end частину) з періодичністю кожного руху повз датчик, де ці дані будуть оброблятися. Пристрій IoT буде мати можливість налаштування мережі та частоти через сайт та мобільний застосунок.
    Серверна частина повинна взаємодіяти з базою даних та надавати дані:
– Про локацію – дані локації, список датчиків локації;
Серверна частина повинна передавати дані, які включають інформацію про локацію, таку як площа локації, назва локації, список датчиків та їх місцезнаходження, а також оновлювати дані, шифрувати та дешифрувати пароль адміністратора системи.
– Про датчики – картка датчиків, підключений сенсор, передані ним показники;
Сервер повинен передавати дані про кожну активність, яка фіксується датчиком. Ця інформація включає в себе деталі датчика, такі як місцезнаходження, латинська назва, перелік підключених сенсорів, назва локації, до якої прикріплений.
– Про активність відвідувачів на локації при отриманні данних з датчиків.
Сервер повинен аналізувати дані, отримані від сенсорів, і визначати кожен рух повз нього. Якщо показники відхиляються від заданих похибок, сервер повинен надсилати сповіщення адміністратору системи про невідповідності на електронну пошту.
    У системі передбачена ролі для адміністування: адміністратор бази даних, що буде мати доступ до бази данних і ключів безпеки, та читач бази даних, що буде мати права на перегляд  бази даних без можливості внесення змін та доступу до ключів безпеки та з можливістю отримати звіт з аналізом відвідуваності.


     1.3.2 Рамки наступних випусків


     У наступних випусках продукту планується впровадження додаткових функцій, спрямованих на поліпшення користувацького досвіду та збільшення можливостей для користувачів:
– Функціональність підписок: У наступних випусках планується додавання різноманітних підписок, які надаватимуть користувачам доступ до додаткових функцій та розширеної функціональності, таких як поради щодо регулювання потоку відвідувачів та можливість взаємодії із відвідувачами.
– Розширені засоби аналітики: Додавання розширених інструментів аналітики для користувачів з підпискою. Ці інструменти нададуть можливість переглядати та аналізувати статистику відвідуваності на графіках та отримувати поради вдосконалювання методів фіксування відвідуваності.
– Розширена спільнота користувачів: Впровадження можливості взаємодії користувачів у спільноті, обмін досвідом та уподобань відвідувачів. Сприяє формуванню активної взаємодії  із відвідувачами та кращого продумування потоку людей на локації.
– Геолокаційні послуги: Додавання можливості використовувати геолокаційні дані для надання користувачам рекомендацій щодо оптимальних зон локації, враховуючи активність на частці території локації.
   Ці функції будуть впроваджені у наступних версіях продукту, які стануть доступними для користувачів з активною підпискою на послуги. Це дозволить розширити можливості програми та дозволить ефективніше керувати потоком відвідувачів у межах локації.


     1.3.3 Обмеження та Виключення


    У новому продукті існують певні обмеження та виключення, які теоретично можуть впливати на роботу та експлуатацію. Ці обмеження та виключення важливо враховувати для коректної роботи системи та фіксування активності відвідувачів. Нижче деякі з них:
– Обмежене Інтернет-з'єднання: Для правильної роботи продукту необхідне стабільне Інтернет-з'єднання. Відсутність Інтернет-з'єднання може призвести до некоректної роботи деяких функцій, зокрема фіксування руху та формування звітів.
– Підтримка обладнання: Продукт підтримує лише деякі типи датчиків та обладнання. Стороннє обладнання може бути несумісним з системою, що може призвести до неможливості інтеграції.
– Доступність інтерфейсу: Інтерфейс продукту може бути недоступний для певної категорії користувачів з обмеженими можливостями.
– Конфіденційність та захист даних: Існує проблема гарантій абсолютної безпеки даних через Інтернет, попри всі можливі зусилля для захисту та конфіденційності системи. Інформація, яка передається через систему, може бути піддана неправомірним ризикам.
– Обмеженість локацій: На деяких локаціях не можна розгорнути системи через наявні умови, такі як погодні, кліматичні та дизайнерські. Такі локації можуть потребувати спеціалізованих датчиків та обладнання.
    Ці обмеження важливі для знання користувачами та адміністраторами системи, щоб уникати проблем та забезпечити ефективну роботу програмної системи в умовах реальної експлуатації.

     1.4 Бізнес-контекст
     1.4.1    Профілі зацікавлених сторін


     На таблиці 1 описані профілі зацікавлених сторін:


     Таблиця 1 – Профілі зацікавлених сторін
Зацікавлена сторона
Головна цінність
Ставлення
Головний інтерес
Обмеження
Власники локацій
Отримання кращої картини відвідуваності зон локації.
Вітаюче, якщо продукт дозволить чітко відслідковувати кількість відвідувачів кожної локації.
Моніторинг відвідуваності та формування звітності для контролю локацій.
Підтримка різних типів датчиків; обмежений бюджет для впровадження нової технології.
Служби безпеки
Зрічність використовування даних про відвідуваність для розподілу ресурсів, забезпечення безпеки та запобігання надзвичайним ситуаціям у разі перевантаження.
Позитивне, якщо продукт буде простим у використанні та доступним для розгортання в людних локаціях.
Відстежування людяних локацій із формуванням детальних та точних звітів відвідуваності.
Підтримка різних типів датчиків;
Маркетингові агентства
Підвищення ефективності розміщення реклами в найбільш відвідуваних зонах.
Позитивне, якщо продукт допоможе в збільшити ефективність рекламних кампаній.
Інтеграція з існуючими системами, кращий контроль рекламних кампаній.
Технічні обмеження щодо сумісності зі стороннім обладнанням.


     1.4.2 Пріоритети проєкту


     На таблиці 2 наведені основні пріорітети проєкту:


    Таблиця 2 – Основні пріорітети проєкту
Показник
Опис
Пріорітет
План робіт
Реліз версії 1.0 повинен бути доступний до 31.05.2024.
Високий



Продовження таблиці 2
Функціональність
Наявність всього зазаначеного функціоналу версії 1.0

Високий
Якість
Система повинна бути стабільною, працювати без збоїв, бути доступною в будь-який час.
Високий
Персонал
Розмір команди – 1 людина
Середній
Ціна
Обмежений бюджет, з можливістю перевищення до 15%
Середній

     1.4.3 Робоче середовище


     У проекті будуть використовуватися ряд технологій та програмних засобів для забезпечення надійності, продуктивності та доступності. Основні компоненти нашого робочого середовища виглядають так:
– Мова програмування: Система буде розроблена за допомогою TypeScript, що забезпечить ефективне виконання завдань.
– База даних: буде використовуватися СКБД PostgreSQL, яка забезпечить надійне зберігання даних та швидкий доступ до них.
– Фреймворк: Для розробки серверної частини буде використовуватися Nest.JS, що гарантує ефективну роботу.
– Користувацький інтерфейс: Для веб-версії застосунку планується використання React.JS для забезпечення інтерактивності та зручного користувацького інтерфейсу.
– Мобільний застосунок: Для мобільної версії застосунку буде використовуватися Kotlin.
– Пристрій IoT: Датчики інфрачервоного руху PIR, мікроконтроллер ESP32, запрограмований на мові С,  для виходу в Інтернет та досягнення Back-end частини.
– Забезпечення безпеки: Планується використання протоколу HTTPS для забезпечення шифрування даних під час передачі, а також впровадження сучасних методів аутентифікації та авторизації для захисту від несанкціонованого доступу.
     Доступність та надійність: Система буде розгорнута на сервері Heroku з можливістю резервного копіювання та аварійного відновлення. Застосунок буде доступний для користувачів цілодобово без значних перерв у роботі.


2 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ
     2.1 Аналіз предметної області


     Проведемо концептуальне моделювання предметної області.
     Із використанням програмної системи для відслідковування відвідуваності зон локації користувачі повинні мати можливість створювати, видаляти, редагувати та отримувати статистику, котра стосується відвідуваності локації.
     Система матиме тільки одну роль користувачів – адміністратор системи.


     2.2 Аналіз інформаційних потреб користувачів


     Проаналізуємо інформаційні потреби для адміністратора системи.
     Для цього було розроблено UML діаграму прецедентів для адміністратора (див. А.1).
     У програмній системі адміністратор матиме можливість:
     а) Взаємодіяти із особистим акаунтом:
– Реєструватись у системі
– Входити до системи
– Виходити із системи
– Переглядати інформацію профілю
– Редагувати інформацію профілю
     б) Керувати із локаціями:
– Переглядати локації
– Додавати нові локації
– Редагувати вже існуючі локації
– Видаляти локації
     в) Взаємодіяти із зонами локації:
– Переглядати зони локації
– Редагувати зони локації
– Отримувати кількість відвідувань для конкретної зони локації
– Видаляти зони локації
– Створювати зони локації
     г) Керувати сенсорами:
– Переглядати сенсори
– Додавати нові сенсори
– Редагувати вже існуючі сенсори
– Видаляти сенсори
     ґ) Взаємодіяти із аналітикою за тиждень для локації:
– Переглядати аналітику згенеровану штучним інтелектом
– Переглянути зону із мінімальною кількістю відвідуваності
– Переглянути зону із максимальною кількістю відвідуваності
– Отримати відсоткове співвідношення відвідуваності зони локації до загальної кількості відвідуваності


     2.3 Проектування бази даних
     2.3.1 Проектування бази даних з використанням ER діаграми


     Для проєктування структури бази даних для програмної системи було розроблено ER діаграму (див. А.3)
     База міститиме 5 таблиць та 18 неключових атрибутів. Далі наведено детальний опис усіх наявних зв’язків між таблицями в базі даних.
     Один користувач може мати багато локацій, але одна локація належить лише одному користувачу. Одна локація може мати багато зон, але одна локація належить лише одній локації. Одна зона локації може володіти багатьма відвідуваннями, але відвідування належить тільки до однієї конкретної зони. Одній зоні можуть належати декілька сенсорів, один сенсор належить тільки одній зоні.


     2.4 Проектування серверної частини проекту
     2.4.1 Архітектура системи


     Для початку роботи було розроблено UML діаграму розгортання (див. А.4). Програмна система буде містити 5 структурних частин:
– Серверна частина
– База даних
– IoT девайс
– Веб застосунок
– Мобільний застосунок
     З використанням діаграми було визначено зв’язки між вищезазначеними структурними частинами, а також протоколи їх взаємодії між собою. Також для системи було розроблено UML діаграму станів (див. А.2).


     2.4.2 REST специфікація


     Користувачі (Users)
– GET /api/user: Отримує поточного користувача.
– POST /api/users: Створює нового користувача.
– POST /api/users/login: Автентифікація користувача за допомогою електронної пошти та пароля.
– PUT /api/users: Оновлює дані користувача.
     Локація (Locations)
– POST /api/locations: Створює локації.
– GET /api/locations: Отримує всі локації користувача.
– GET /api/locations/{id}: Отримує локацію за id.
– GET /api/ locations/{id}/attendances: Отримує локації із всіма її відвідуваннями.
– PATCH /api/locations: Оновлює дані про локацію.
– DELETE /api/locations/{id}: Видаляє локації.
     Відвідування (Attendances)
– POST /api/attendances: Створює запис відвідування.
– GET /api/attendances: Отримує відвідування.
     Аналітика (Analytics)
– POST /api/analytics: Отримує згенерований штучним інтелектом звіт із аналітикою.
     Зони (Sectors)
– POST /api/sectors: Створює зони локації.
– GET /api/sectors: Отримує всі зони локації.
– GET /api/sectors/{id}: Отримує зони локації за id.
– PATCH /api/sectors/{id}: Оновлює зони локації за id.
– DELETE /api/sectors/{id}: Видаляє зони локації за id.
     Сенсори (Sensors)
– GET /api/sensors{id}: Отримує сенсор за id.
– GET /api/sensors: Отримує всі сенсори.
– POST /api/sensors: Створює сенсор.
– PATCH /api/sensors/{id}: Оновлює сенсор за id.
– DELETE /api/sensors{id}: Видаляє сенсор за id.



     2.4.3 Розробка сервера


     У якості технології для розробки серверної частини було використано фреймворк Nest.JS [3] та мову програмування JavaScript із надбудовою TypeScript. У якості середовища було використано редактор коду Visual Studio Code.


     2.4.3.1 База даних та підключення


     Для роботи із базою даних було використано PostgreSQL. Для взаємодії із базою даних було використано об’єктно-реляційне відображення TypeORM.
     Для створення таблиць в базі даних був використаний підхід code-first: були створені класи сутностей в програмі та використано міграції для підключеної бази даних.


     2.4.3.2 Структура серверу


     Вхідною точкою на сервері служать контролери. Після отримання запиту від клієнта контролери передають управління сервісам, які відповідають за бізнес-логіку додатку та взаємодію із базою даних за допомогою TypeORM.


     2.4.3.3 Автентифікація


     Під час реєстрації дані користувача записують в базу даних (див. Б.1, рядки 18-47).  Пароль зареєстрованого користувача хешується та зберігає його в захешованому вигляді в базі даних для забезпечення безпеки.
     Під час входу в систему виконується перевірка, чи існує користувач в базі даних із введеними користувачем електронною поштою та паролем (див. Б.2 рядки 8-30). У випадку, якщо дані коректні, то створюється JWT-токен та підписує його із використанням секретного ключа (див. Б.1 рядки 67-84).


     2.4.3.4 Управління локаціями


     Користувач має можливість створити, відредагувати чи видалити локацію (див. Б.3 рядки 17-35, 75-108, 110-123). Також користувач може переглянути свої локації, детальну інформацію за локацією та список зон локації (див. Б.3 рядки 37-57).


     2.4.3.5 Управління зонами локації


     Користувач має можливість створити, відредагувати чи видалити зони локації (див. Б.4 рядки 18-41, 84-113, 115-128). Також користувач може переглянути зони локації, детальну інформацію за локацією та її відвідування (див. Б.4 рядки 43-66).


     2.4.3.6 Управління сенсорами


     Користувач має можливість створити, відредагувати чи видалити зони локації (див. Б.5 рядки 17-35, 37-57, 75-108). Також користувач може переглянути всі сенсори (див. Б.5 рядки 37-57).


     2.4.3.7 Фіксування та отримання аналітики відвідуваності


     ІоТ пристрій з кожним рухом повз датчик інфрачервоного світла фіксує відвідування зони локації та записує її до бази даних (див. Б.7 рядки 15-32). Користувач має можливість отримати аналітику, згенеровану моделлю штучного інтелекту, на основі відвідуваності зон локації (див. Б.6 рядки 140-215).


     2.5  Проектування програмного забезпечення для IoT пристрою
     2.5.1 Моделювання програмного забезпечення для IoT пристрою


     Для того, щоб описати функціональність системи було створено UML діаграму прецедентів (див. А.5). Дана діаграма тримає в собі одну основну роль – роль сенсора.
     Сенсор може здійснювати підключення до мережі Інтернет та фіксувати відвідування.
     Повний цикл роботи описано нижче (див. А.6):
– Система здійснює під’єднання до Wi-Fi. SSID та пароль Wi-Fi заздалегідь зазначені.
–  Після підключення до мережі Wi-Fi, розпочинається функціонал фіксування руху відвідувачів задля збору інформації стосовно відвідувань.
     Після виявлення руху, PIR-сенсор руху надсилає на сервер запит із фіксованим відвідуванням.



     2.5.2 Взаємодія між частинами системи та IoT пристроєм

     Взаємодія програмного забезпечення з іншими частинами системи відбуватиметься через серверну частину, до якої було додано метод надсилання даних, які стосуються відвідування. В якості прикладу взаємодії було створено діаграму взаємодії на основі діаграми активності щодо відправки запиту із даними відвідування(додаток А, рис. А.7 та А.8). На цій діаграмі можна докладніше поглянути на послідовність дій програми та як відбувається взаємодія з серверною частиною.


     2.5.3 Архітектура програмного забезпечення для IoT пристрою


     Програмне забезпечення для пристрою IoT було розроблено за допомогою мови програмування Python у симуляторі Wokwi [1] із застосуванням архітектури монолітного додатку. Така архітектура передбачає, що всі компоненти програмного забезпечення об'єднані в одну єдину програму. У даному випадку, це означає, що всі функції – підключення до мережі, обробка даних від пасивного інфрачервоного датчика руху, а також взаємодія із сервером – реалізовані в одному додатку.
     Однак, з метою підвищення гнучкості та масштабованості програмного забезпечення, монолітний додаток було розбито на окремі модулі. Це дозволило краще організувати код, полегшити його підтримку та тестування, а також спростило додавання нових функцій.
     Також, було застосовано мікроконтролер Arduino ESP32, який тримає в собі функціонал підключення до мережі, світлодіод та пасивний інфрачервоний датчик руху (див. А.9).
     Для взаємодії із серверною частиною програмної системи використовуються HTTP-запити, які здійснюються за допомогою модуля urequests. За допомогою даного модуля можна здійснювати запити POST до сервера. Розбивка на модулі також дозволило окремо обробляти та тестувати HTTP-запити, що сприяло покращенню загальної структури та функціональності системи.


     2.5.4 Програмна розробка системи


     Перед початком написання коду для ІоТ-пристрою було розроблено програмну схему, що описує взаємодію між його компонентами: контролером, сенсором та серверною частиною (див. А.9). В коді було визначено глобальні змінні, що використовуються для зберігання мережевих налаштувань, даних сенсора та зони локації, до якої відноситься сенсор.
     Програма бере початок з ініціалізації основного модулю AreaPulseService та виклику його функції main() (див. Б.8, рядки 3-4).

     2.5.4.1 Модуль constants.py


     Модуль constants.py тримає константні значення, які використовуються у програмі, такі як налаштування мережі, URL API та id зони локації.


     2.5.4.2 Модуль http_service.py


     Модуль http_service.py відповідає за взаємодію з сервером через HTTP запити. Клас HttpService містить функцію для здійснення запиту. Функція register_attendance() виконує POST-запит за допомогою модуля urequests для фіксування відвідування зони локації (див. Б.9, рядки 5-27).


     2.5.4.3 Модуль wifi_service.py


     Модуль wifi_service.py відповідає за підключення до мережі Wi-Fi. Модуль Wi-Fi ініціалізується у класі WiFiService, його функція connect_to_wifi() здійснює з’єднання до Wi-Fi мережі, використовуючи задані SSID та пароль в модулі constants.py (див. Б.10, рядки 5-17).


     2.5.4.4 Модуль area_pulse_service.py


     Модуль area_pulse_service.py, основний модуль, відповідає за реалізацію основного функціоналу програми. Клас AreaPulseService містить ініціалізацію всіх необхідних зовнішніх сервісів та PIR-сенсору. Функція main() містить в собі під’єднання до мережі, обробку руху виявленого пасивним інфрачервоним датчиком руху та відправку фіксації відвідування на сервер в циклі (див. Б.11, рядки 7-30).


     2.6 Проектування клієнтської частини проекту
     2.6.1 Моделювання клієнтської частини проекту


     Для того, щоб розглянути функціональність клієнтської частини програмної системи було створено Use-Case діаграму для користувача. Усього є одна роль користувача – адміністратор локації, який має змогу додавати, видаляти, редагувати локації, редагувати зони локації, сенсори локації та переглядати відвідуваність як локації в цілому, так і конкретної зони локації.
     Функціонал користувача-адміністратора було наведено на UML діаграмі прецедентів (див. А.9). Згідно до діаграми, для початку роботи користувач має авторизуватись у системі, іншими словами або авторизуватись, або зареєструватись. Після успішної авторизації користувач отримує доступ та може переглядати, редагувати, видаляти локації. Додатково, користувач може переглядати, редагувати, видаляти зони локації та їхні сенсори.
     Також діяльність користувача та його взаємодія із різними зонами локації передбачає порядок доступу до різних функцій та можливі варіант дій. Наприклад, для того щоб переглянути відвідуваність, користувач спочатку повинен перейти на сторінку певної локації або конкретної зони, до якої відносяться відвідування, знайти відповідну секцію і лише після цього може переглядати інформацію про відвідування.


     2.6.2 Архітектура клієнтської частини проєкту


     Для створення клієнтської частини проекту було використано бібліотеку React.JS [2], розширення мови програмування JavaScript – TypeScript, а також HTML і CSS для розмітки. Дизайн було розроблено з використанням бібліотеки Chakra UI.
     Проект організовано таким чином:
   – Components – відображають окремі компоненти системи.
   – Routes – відповідають за маршрутизацію.
   – Types – містять основні типи даних.
   – Api – відповідають за взаємодію з сервером.
   – Assets – зберігають статичні файли.
     Клієнтська частина спілкується з сервером Nest.JS через HTTP-запити: GET, POST, PUT, DELETE. Для демонстрації структури компонентів системи була створена UML діаграму компонентів (див. А.12).


     2.6.3 Розробка клієнтської частини проєкту


     Основний функціонал системи – перегляд інформації про локації, зони локації та відвідувань. Було розроблено UML діаграму станів (див. А.10) та UML діаграму діяльності (див. А.11) для демонстрації взаємодії користувача та системи.


     2.6.3.1 Компонент LocationDetails


     Розроблений для відображення та редагування деталей конкретної локації. За допомогою бібліотеки TanstackQuery оголошується метод отримання локації із серверної частини під час ініціалізації компонента. (див. Б.12, рядки 24-49) Отримує ідентифікатор локації з маршруту, перевіряє, чи стосується користувач до локації, завантажує дані про неї та її зони й відвідування за допомогою відповідних сервісів.


     2.6.3.2 Компонент SectorDetails


     Розроблений для відображення та редагування деталей конкретної зони локації. За допомогою бібліотеки TanstackQuery оголошується метод отримання зони локації із серверної частини під час ініціалізації компонента (див. Б.13, рядки 26-53).  Отримує ідентифікатор ферми з маршруту, перевіряє, чи локація користувача відноситься до зони локації, завантажує дані про неї та її відвідування за допомогою відповідних сервісів.


     2.7  Проектування мобільної частини програмної системи
     2.7.1 Моделювання мобільної частини програмної системи


     Для того, щоб розглянути функціональність мобільного застосунку програмної системи було створено Use-Case діаграму для користувача. Усього є одна роль користувача – адміністратор локації, який має змогу отримувати аналітику відвідування конкретної локації, згенерованої моделлю штучного інтелекту.
     Функціонал користувача-адміністратора було наведено на UML діаграмі прецедентів (див. А.14). Згідно до діаграми, для початку роботи користувач має авторизуватись у системі. Після успішної авторизації користувач отримує доступ та може переглядати локації. Додатково, користувач може отримувати аналітику для конкретної локації.
     Також діяльність користувача та його взаємодія із різними локаціями передбачає порядок доступу до різних функцій та можливі варіант дій. Наприклад, для того щоб переглянути аналітику, користувач спочатку повинен перейти на сторінку певної локації, до якої відносяться відвідування і лише після цього може отримати аналітику про відвідування.


2.7.2 Архітектура мобільної частини програмної системи


     З метою розробки компоненту мобільного додатку було застосовано мову програмування Kotlin. У процесі створення застосовано архітектурний підхід MVVM. Дизайн інтерфейсу користувача було реалізовано за допомогою сучасного інструментарію Jetpack Compose [4].
     Проект організовано таким чином:
   – Model – визначає структуру даних, що використовуються в застосунку, та їх взаємозв'язки.
   – Network – забезпечує взаємодію з віддаленими серверами для отримання та відправки даних.
   – Pages – містить компоненти Jetpack Compose, що формують інтерфейс користувача для різних екранів застосунку.
   – Repository – виступає посередником між джерелами даних (локальні бази даних, мережа) та іншими частинами застосунку, надаючи уніфікований інтерфейс доступу до даних.
   – ViewModel – зберігає та керує станом інтерфейсу користувача, забезпечуючи його зв'язок з моделлю та репозиторієм.
     Мобільний застосунок спілкується з сервером Nest.JS через HTTP-запити за допомогою бібліотеки ktor-client: GET, POST, PUT, DELETE. Для демонстрації структури компонентів системи була створена UML діаграму компонентів (див. А.17).


     2.7.3 Розробка мобільної частини програмної системи


     Основний функціонал системи – перегляд інформації про локації та її аналітику відвідування. Було розроблено UML діаграму станів (див. А.15) та UML діаграму діяльності (див. А.16) для демонстрації взаємодії користувача та системи.


     2.7.3.1 Модуль NetworkModule


     Модуль NetworkModule відповідає за налаштування та створення HTTP-клієнта для взаємодії з віддаленим сервером. Він використовує бібліотеку Ktor для встановлення з'єднання, обробки JSON-даних та логування запитів і відповідей (див. Б.14, рядки 10-25).


     2.7.3.2 Модуль LocationRepository


     Модуль LocationRepository призначений для взаємодії з API серверної частини з метою отримання та обробки даних про локації та її відвідування. Він реалізує інтерфейс LocationRepository, який визначає два методи: getLocations для отримання списку локацій та getLocationAnalytics для отримання аналітики по конкретній локації (див. Б.15, рядки 6-9).
     У класі LocationRepositoryImpl реалізовано ці методи з використанням об'єкта LocationApi, який відповідає за безпосереднє виконання мережевих запитів (див. Б.15, рядки 11-29). У випадку виникнення помилок під час запитів, повертаються порожні значення або порожній список, а повідомлення про помилку виводиться в консоль.



     2.7.3.3 Модуль LocationViewModel


     Розроблений для отримання та керування даними про локації користувача. Використовує LocationRepository для взаємодії з сервером та отримання списку локацій, доступних користувачу (див. Б.16, рядки 12-55). Також містить функціонал для отримання аналітичних даних по конкретній локації. Обробляє помилки та стани завантаження, надаючи відповідні потоки даних для інтерфейсу користувача.


     ВИСНОВКИ


     У ході розробки програмної системи для автоматичного керування відвідуваністю зон локації був проведений аналіз предметної області. Цей аналіз дозволив визначити головні задачі системи, які потрібно було вирішити. Основною метою системи було забезпечення ефективного контролю і управління параметрами локації та її зон.
     У результаті роботи була розроблена програмна система, яка успішно виконує поставлені завдання. Система має основні та необхідні функції, які були заплановані на етапі постановки задачі. Користувачі системи мають змогу зареєструватися та увійти до неї, а також змінювати свої дані в особистому профілі. Окрім цього, в системі реалізовані функції перегляду даних локації, зон локації, сенсорів зон локації та отримання аналітичних даних згенерованих моделлю штучного інтелекту. Користувачі можуть підключати свої сенсори і відстежувати зафіксовані відвідування.
     У результаті розробки програмної системи була підготовлена пояснювальна записка з детальною документацією системи, яка відповідає методичним вказівкам [4]. Ця документація детально описує функціональність системи, архітектуру, проектування та використані технології.
     Загалом, розроблена програмна система для автоматизованого контролю відвідуваності зон локації відповідає вимогам і досягає поставлених цілей. Вона забезпечує користувачам зручні та ефективні інструменти для контролю і управління відвідуванням зон локації.


     ПЕРЕЛІК ДЖЕРЕЛ


     1. Wokwi – сайт для емуляції ІоТ-пристроїв: https://wokwi.com/ (дата звернення – 18.05.2024)
     2. Документація React.JS: https://react.dev/ (дата звернення – 22.05.2023)
     3. Документація Nest.JS: https://nestjs.com/ (дата звернення – 26.04.2023)
     5. Документація Android: https://developer.android.com/develop (дата звернення – 30.05.2023)
